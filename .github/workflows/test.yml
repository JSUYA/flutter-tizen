name: Test

on: [push, pull_request]

jobs:
  tool:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Fetch Flutter SDK
        run: |
          git clone https://github.com/flutter/flutter.git
          cd flutter
          git checkout $(cat ../bin/internal/flutter.version)
      - name: Run tests
        run: flutter/bin/flutter test --coverage
      - name: Report coverage
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y lcov
          lcov --summary coverage/lcov.info
          lcov --list coverage/lcov.info

  embedding:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Run tests
        run: dotnet test embedding/csharp

  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          path: flutter-tizen

      - name: Cache Python 2.7
        id: cache-python
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/python2.7
          key: python-2.7-ubuntu-24.04

      - name: Check libpython installation
        run: ldconfig -p | grep libpython

      - name: Install dependencies
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          sudo apt update
          sudo apt install -y build-essential checkinstall libncurses-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar xzf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --enable-optimizations
          make
          sudo make altinstall
          sudo update-alternatives --install /usr/bin/python python /usr/local/lib/python2.7 1
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2
          sudo ldconfig
          find -name "libpython*.so*"

      - name: Verify Python version
        run: python2.7 --version

      - name: Verify libpython installation
        run: ldconfig -p | grep libpython

      - name: Install Tizen Studio
        run: |
          sudo add-apt-repository universe
          sudo apt update
          sudo apt install -y gettext libkf5itemmodels5 libkf5kiowidgets5 libkchart2
          curl https://download.tizen.org/sdk/Installer/tizen-studio_5.6/web-cli_Tizen_Studio_5.6_ubuntu-64.bin -o install.bin
          chmod a+x install.bin
          ./install.bin --accept-license $HOME/tizen-studio
          rm install.bin
      - name: Install Tizen Studio packages
        run: |
          $HOME/tizen-studio/package-manager/package-manager-cli.bin install \
            NativeToolchain-Gcc-9.2 \
            IOT-Headed-6.0-NativeAppDevelopment-CLI
      - name: Create a Tizen certificate profile
        run: |
          export PATH=$PATH:$HOME/tizen-studio/tools/ide/bin
          tizen certificate -a tizen -p tizen -f tizen
          tizen security-profiles add \
            -n tizen \
            -a $HOME/tizen-studio-data/keystore/author/tizen.p12 \
            -p tizen
      - name: Set up flutter-tizen
        run: |
          export PATH=`pwd`/flutter-tizen/bin:$PATH
          echo $PATH >> $GITHUB_PATH
          flutter-tizen doctor -v
      - name: Build native TPK
        run: |
          flutter-tizen create --tizen-language cpp native_app
          cd native_app
          flutter-tizen build tpk -pcommon --debug
      - name: Build .NET TPK
        run: |
          flutter-tizen create --tizen-language csharp dotnet_app
          cd dotnet_app
          flutter-tizen build tpk -pcommon --debug
